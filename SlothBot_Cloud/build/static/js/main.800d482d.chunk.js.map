{"version":3,"sources":["store/store.jsx","components/universal/NavBar.jsx","pages/Home.jsx","apis/database.jsx","components/Controller/InstructionList.jsx","components/Controller/SensorData.jsx","components/Controller/CommandBank.jsx","components/Controller/StatusData.jsx","pages/Controller.jsx","pages/Team.jsx","pages/Dashboard.jsx","App.jsx","index.js"],"names":["rootReducer","createSlice","name","initialState","view","controller","activeAgent","agentStatus","agentStatusReady","agentDataChart","agentDataReady","selectedDataView","agnetInstructions","agentInstructionsReady","reducers","toPage","state","action","payload","selectActiveAgentAndUnreadyData","setVisualization","setVisualizedSensorDataView","setFetchedAgentInstruction","agentInstructions","setAgentStatusData","actions","store","configureStore","reducer","CecropiaNavBar","props","toggleDropdown","bind","toggleNavbar","dropdownOpen","collapseOpen","this","setState","target","dispatch","type","expand","sticky","style","backgroundColor","href","onClick","open","navbar","handleGoToPage","active","className","size","seamless","icon","faSearch","placeholder","React","Component","connect","BasicCardExample","height","width","src","title","frameBorder","autoplay","allow","allowFullScreen","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","DBRef","firestore","collection","RobotController","dataListener","DB","doc","onSnapshot","docSnapshot","console","log","data","instructions","uniqueKey","instruction","push","length","options","scales","yAxes","ticks","beginAtZero","x","autoSkip","maxTicksLimit","SensorData","grouped","env_data","Object","entries","ts","dp","assign","timestamp","parseInt","buckets","_","mapValues","groupBy","dlist","map","dpoint","omit","dname","bucket","filter","_value","index","_Arr","sortBy","labels","input","Date","toLocaleDateString","datasets","label","fill","borderColor","keys","selections","dataType","value","selected","onChange","event","buttonStyles","margin","CommandBank","inst","set","merge","fireInstructions","theme","lastHeartBeatTime","heartbeat","toLocaleString","ip_info","IPv4","city","country_code","activeAgentSelector","useDispatch","useSelector","useState","dataReady","setDataReady","setData","get","then","all_agents","docs","forEach","id","agent_id","xs","md","lg","e","StatusData","cardStyle","sm","handleConnect","all_cards","agent","online","button","now","outline","disabled","top","position","App","main","NavBar","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.800d482d.chunk.js","sourcesContent":["import { createSlice, configureStore } from \"@reduxjs/toolkit\";\n\nconst rootReducer = createSlice({\n  name: \"reducer\",\n  initialState: {\n    view: \"home\",\n    controller: {\n      activeAgent: null,\n      agentStatus: null,\n      agentStatusReady: false,\n      agentDataChart: null,\n      agentDataReady: false,\n      selectedDataView: null,\n      agnetInstructions: [],\n      agentInstructionsReady: false,\n    },\n  },\n  reducers: {\n    toPage: (state, action) => {\n      state.view = action.payload;\n    },\n\n    selectActiveAgentAndUnreadyData: (state, action) => {\n      state.controller.activeAgent = action.payload;\n      state.controller.agentDataReady = false;\n      state.controller.agentInstructionsReady = false;\n      state.controller.agentStatusReady = false;\n    },\n\n    setVisualization: (state, action) => {\n      state.controller.agentDataReady = action.payload.agentDataReady;\n      state.controller.agentDataChart = action.payload.agentDataChart;\n      state.controller.selectedDataView = action.payload.selectedDataView;\n    },\n\n    setVisualizedSensorDataView: (state, action) => {\n      state.controller.selectedDataView = action.payload;\n    },\n\n    setFetchedAgentInstruction: (state, action) => {\n      state.controller.agentInstructions = action.payload.agentInstructions;\n      state.controller.agentInstructionsReady =\n        action.payload.agentInstructionsReady;\n    },\n\n    setAgentStatusData: (state, action) => {\n      state.controller.agentStatus = action.payload.agentStatus;\n      state.controller.agentStatusReady = action.payload.agentStatusReady;\n    }\n\n  },\n});\n\nexport const {\n  toPage,\n  selectActiveAgentAndUnreadyData,\n  setVisualization,\n  setVisualizedSensorDataView,\n  setFetchedAgentInstruction,\n  setAgentStatusData\n} = rootReducer.actions;\n\nexport const store = configureStore({\n  reducer: rootReducer.reducer,\n});\n\nexport default rootReducer.reducer;\n","import React from \"react\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupText,\n  FormInput,\n  Collapse,\n} from \"shards-react\";\nimport \"./navbar.css\";\n\nimport { connect } from \"react-redux\";\nimport { toPage } from \"../../store/store\";\n\nclass CecropiaNavBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleDropdown = this.toggleDropdown.bind(this);\n    this.toggleNavbar = this.toggleNavbar.bind(this);\n\n    this.state = {\n      dropdownOpen: false,\n      collapseOpen: false,\n    };\n  }\n\n  toggleDropdown() {\n    this.setState({\n      ...this.state,\n      ...{\n        dropdownOpen: !this.state.dropdownOpen,\n      },\n    });\n  }\n\n  toggleNavbar() {\n    this.setState({\n      ...this.state,\n      ...{\n        collapseOpen: !this.state.collapseOpen,\n      },\n    });\n  }\n\n  handleGoToPage(target) {\n    this.props.dispatch(toPage(target));\n  }\n\n  render() {\n    return (\n      <Navbar type=\"dark\" expand=\"md\" sticky=\"top\" style={{ backgroundColor: \"#223344\" }}>\n        <NavbarBrand href=\"#\">Cecropia</NavbarBrand>\n        <NavbarToggler onClick={this.toggleNavbar} />\n\n        <Collapse open={this.state.collapseOpen} navbar>\n          <Nav navbar>\n            <NavItem>\n              <NavLink\n                onClick={() => this.handleGoToPage(\"home\")}\n                href=\"#\"\n                active={this.props.view===\"home\"}\n              >\n                Home\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink\n                onClick={() => this.handleGoToPage(\"dashboard\")}\n                href=\"#\"\n                active={this.props.view===\"dashboard\"}\n              >\n                Dashboard\n              </NavLink>\n            </NavItem>{\" \"}\n            <NavItem>\n              <NavLink\n                onClick={() => this.handleGoToPage(\"controller\")}\n                href=\"#\"\n                active={this.props.view===\"controller\"}\n              >\n                Controller\n              </NavLink>\n            </NavItem>{\" \"}\n            <NavItem>\n              <NavLink\n                onClick={() => this.handleGoToPage(\"team\")}\n                href=\"#\"\n                active={this.props.view===\"team\"}\n              >\n                Team\n              </NavLink>\n            </NavItem> {\" \"}           \n          </Nav>\n\n          <Nav navbar className=\"ml-auto\">\n            <InputGroup size=\"sm\" seamless>\n              <InputGroupAddon type=\"prepend\">\n                <InputGroupText>\n                  <FontAwesomeIcon icon={faSearch} />\n                </InputGroupText>\n              </InputGroupAddon>\n              <FormInput className=\"border-0\" placeholder=\"Search...\" />\n            </InputGroup>\n          </Nav>\n        </Collapse>\n      </Navbar>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  view: state.view,\n});\n\nexport default connect(mapStateToProps)(CecropiaNavBar);\n","import React from \"react\";\n\nexport default function BasicCardExample() {\n  return (\n    <div style={{ height: \"calc(100vh - 80px)\" }}>\n      <iframe\n        width=\"100%\"\n        height=\"100%\"\n        src=\"https://www.youtube.com/embed/foiRTJnc-vA\"\n        title=\"YouTube video player\"\n        frameBorder=\"0\"\n        autoplay=\"1\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n      ></iframe>\n    </div>\n  );\n}\n","\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCGiPWGUd_6q5FvGy908P91AT3i7pyslHI\",\n  authDomain: \"cecropia.firebaseapp.com\",\n  databaseURL: \"https://cecropia-default-rtdb.firebaseio.com\",\n  projectId: \"cecropia\",\n  storageBucket: \"cecropia.appspot.com\",\n  messagingSenderId: \"582360457051\",\n  appId: \"1:582360457051:web:d75e356ec9e83ef306c47e\",\n  measurementId: \"G-QXFS18M5T5\",\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nconst DBRef = firebase.firestore().collection(\"slothbots\");\n\nexport default DBRef;","import React from \"react\";\nimport { ListGroup, ListGroupItem } from \"shards-react\";\nimport { connect } from \"react-redux\";\nimport DB from \"../../apis/database\";\nimport \"./InstructionList.css\";\n\nimport { setFetchedAgentInstruction } from \"../../store/store\";\n\nclass RobotController extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataListener = () => {};\n  }\n\n  componentWillUnmount() {\n    this.dataListener(); // unhook the listener\n  }\n\n  render() {\n    if (!this.props.agentInstructionsReady) {\n      if(!this.props.activeAgent  || this.props.activeAgent === \"select\") {\n        return <div>Please select an agent.</div>\n      }\n      this.dataListener(); //unhook the listener\n      this.dataListener = DB.doc(this.props.activeAgent).onSnapshot(\n        (docSnapshot) => {\n          console.log('refreshing')\n          this.props.dispatch(\n            setFetchedAgentInstruction({\n              agentInstructions: docSnapshot.data().instructions,\n              agentInstructionsReady: true\n            })\n          );\n        }\n      );\n    }\n    let instructions = [];\n    let uniqueKey = 0;\n    if (this.props.agentInstructionsReady) {\n      let data = this.props.agentInstructions;\n      for (let instruction of data) {\n        instructions.push(\n          <ListGroupItem className=\"SmallPaddingInstruction\" key={uniqueKey++}>\n            {instruction}\n          </ListGroupItem>\n        );\n      }\n      if (instructions.length === 0) {\n        instructions.push(\n          <ListGroupItem className=\"SmallPaddingInstruction\" key=\"empty\">\n            Instruction Queue is empty\n          </ListGroupItem>\n        );\n      }\n    } else {\n      instructions = <ListGroupItem>Loading...</ListGroupItem>;\n    }\n    return (\n      <ListGroup className=\"black SmallPaddingInstruction\">\n        {instructions}\n      </ListGroup>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  activeAgent: state.controller.activeAgent,\n  agentInstructions: state.controller.agentInstructions,\n  agentInstructionsReady: state.controller.agentInstructionsReady,\n});\n\nexport default connect(mapStateToProps)(RobotController);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport DB from \"../../apis/database\";\nimport { Line } from \"react-chartjs-2\";\nimport { Container, FormSelect } from \"shards-react\";\n\nimport {\n  setVisualization,\n  setVisualizedSensorDataView,\n} from \"../../store/store\";\nimport _, {sortBy } from \"lodash\";\n\nconst options = {\n  scales: {\n    yAxes: [\n      {\n        ticks: {\n          beginAtZero: true,\n        },\n      },\n    ],\n    x: {\n      ticks: {\n        autoSkip: true,\n        maxTicksLimit: 5,\n      },\n    },\n  },\n};\n\nclass SensorData extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataListener = () => {};\n  }\n\n  componentWillUnmount() {\n    this.dataListener(); // unhook the listener\n  }\n\n  render() {\n    if (!this.props.agentDataReady) {\n      if (!this.props.activeAgent || this.props.activeAgent === \"select\") {\n        return <div>Please select an agent.</div>;\n      }\n      this.dataListener(); // unhook the current listener\n      this.dataListener = DB.doc(this.props.activeAgent).onSnapshot((doc) => {\n        let grouped = {};\n        doc = doc.data().env_data;\n\n        for (let [ts, dp] of Object.entries(doc))\n          Object.assign(dp, { timestamp: parseInt(ts) });\n        let buckets = _.mapValues(_.groupBy(doc, \"type\"), (dlist) =>\n          dlist.map((dpoint) => _.omit(dpoint, \"type\"))\n        );\n        for (let [dname, bucket] of Object.entries(buckets)) {\n\n          // downsample as needed\n          while(bucket.length > 100){\n            bucket = bucket.filter(function(_value, index, _Arr) {\n                return index % 2 === 0;\n            });\n          }\n\n          // sort bucket by timestamp\n          bucket = sortBy(bucket, \"timestamp\");\n          \n\n          // process timestamp into readable dates\n          function getLocaleDate(input){\n             return new Date(input.timestamp).toLocaleDateString();\n          }\n\n          // prepare visualization data\n          grouped[dname] = {\n            labels: _.map(bucket, getLocaleDate),\n            datasets: [\n              {\n                label: dname,\n                data: _.map(bucket, \"data\"),\n                fill: false,\n                backgroundColor: \"rgb(255, 99, 132)\",\n                borderColor: \"rgba(255, 99, 132, 0.2)\",\n              },\n            ],\n          };\n        }\n\n        this.props.dispatch(\n          setVisualization({\n            agentDataChart: grouped,\n            agentDataReady: true,\n            selectedDataView: Object.keys(grouped)[0],\n          })\n        );\n      });\n    }\n    if (!this.props.agentDataReady) {\n      return <div>Loading...</div>;\n    } else {\n      let selections = [];\n      for (let dataType of Object.keys(this.props.agentDataChart)) {\n        selections.push(<option value={dataType} selected={this.props.selectedDataView===dataType} >{dataType}</option>);\n      }\n      return (\n        <Container>\n          <FormSelect\n            onChange={(event) => {\n              this.props.dispatch(\n                setVisualizedSensorDataView(event.target.value)\n              );\n            }}\n          >\n            {selections}\n          </FormSelect>\n          <Line\n            data={this.props.agentDataChart[this.props.selectedDataView]}\n            options={options}\n          />\n        </Container>\n      );\n    }\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  activeAgent: state.controller.activeAgent,\n  agentDataReady: state.controller.agentDataReady,\n  agentDataChart: state.controller.agentDataChart,\n  selectedDataView: state.controller.selectedDataView,\n});\n\nexport default connect(mapStateToProps)(SensorData);\n","import React from \"react\";\nimport { Card, CardHeader, CardBody, CardFooter, Button } from \"shards-react\";\nimport { connect } from \"react-redux\";\nimport DB from \"../../apis/database\";\nimport \"./InstructionList.css\";\n\nconst buttonStyles = {\n  margin: \"5px\",\n};\n\nclass CommandBank extends React.Component {\n  fireInstructions(inst) {\n    if (!this.props.activeAgent || this.props.activeAgent === \"select\") return;\n    DB.doc(this.props.activeAgent).set(\n      {\n        instructions: inst,\n      },\n      {\n        merge: true,\n      }\n    );\n  }\n\n  render() {\n    return (\n      <Card style={{ width: \"100%\", margin: \"10px\" }} className=\"black\">\n        <CardHeader>Robot Command Bank</CardHeader>\n        <CardBody>\n          <p>\n            All instructions will be queued to the robot and executed at\n            earliest convenience.\n          </p>\n          <Button\n            style={buttonStyles}\n            onClick={() => this.fireInstructions([\"LED ON\"])}\n          >\n            LED ON\n          </Button>\n          <Button\n            style={buttonStyles}\n            onClick={() => this.fireInstructions([\"LED OFF\"])}\n          >\n            LED OFF\n          </Button>\n          <Button\n            style={buttonStyles}\n            onClick={() =>\n              this.fireInstructions([\n                \"LED ON\",\n                \"SLEEP 1\",\n                \"LED OFF\",\n                \"SLEEP 1\",\n                \"LED ON\",\n                \"SLEEP 1\",\n                \"LED OFF\",\n                \"SLEEP 1\",\n              ])\n            }\n          >\n            Blink\n          </Button>\n          <hr />\n          {/* <Button\n            style={buttonStyles}\n            onClick={() => {\n              this.fireInstructions([\"READ SENSORS\"]);\n            }}\n          >\n            Read Sensors\n          </Button> */}\n          <Button\n            style={buttonStyles}\n            onClick={() => {\n              this.fireInstructions([\"GO\"]);\n            }}\n          >\n            GO\n          </Button>\n          <Button\n            style={buttonStyles}\n            onClick={() => {\n              this.fireInstructions([\"STOP\"]);\n            }}\n          >\n            STOP\n          </Button>\n          <Button\n            style={buttonStyles}\n            theme='info'\n            onClick={() => {\n              this.fireInstructions([\"UPDATE\"]);\n            }}\n          >\n            Update\n          </Button>\n        </CardBody>\n        <CardFooter></CardFooter>\n      </Card>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  activeAgent: state.controller.activeAgent,\n});\n\nexport default connect(mapStateToProps)(CommandBank);\n","import React from \"react\";\nimport { Card, CardHeader, CardBody, CardFooter } from \"shards-react\";\nimport { connect } from \"react-redux\";\nimport DB from \"../../apis/database\";\nimport \"./InstructionList.css\";\n\nimport { setAgentStatusData } from \"../../store/store\";\n\nclass CommandBank extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dataListener = () => {};\n  }\n\n  componentWillUnmount() {\n    this.dataListener(); // unhook the listener\n  }\n\n  render() {\n    if (!this.props.agentStatusReady) {\n      if (!this.props.activeAgent || this.props.activeAgent === \"select\") {\n        return <div>Please select an agent.</div>;\n      }\n      this.dataListener(); //unhook the listener\n      this.dataListener = DB.doc(this.props.activeAgent).onSnapshot(\n        (docSnapshot) => {\n          this.props.dispatch(\n            setAgentStatusData({\n              agentStatus: docSnapshot.data().state,\n              agentStatusReady: true,\n            })\n          );\n        }\n      );\n      return <div>loading...</div>\n    }\n\n    let lastHeartBeatTime = new Date(this.props.agentStatus.heartbeat);\n\n\n    return (\n      <Card style={{ width: \"100%\", margin: \"10px\" }} className=\"black\">\n        <CardHeader>Robot Status</CardHeader>\n        <CardBody>\n          <p>Last Heartbeat: {lastHeartBeatTime.toLocaleString()}</p>\n          <p>IP Address: {this.props.agentStatus.ip_info.IPv4}</p>\n          <p>Location: {this.props.agentStatus.ip_info.city}, {this.props.agentStatus.ip_info.state}, {this.props.agentStatus.ip_info.country_code} </p>\n        </CardBody>\n        <CardFooter></CardFooter>\n      </Card>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  activeAgent: state.controller.activeAgent,\n  agentStatus: state.controller.agentStatus,\n  agentStatusReady: state.controller.agentStatusReady,\n});\n\nexport default connect(mapStateToProps)(CommandBank);\n","import React, { useState } from \"react\";\nimport { Col, Container, Row, Button, FormSelect } from \"shards-react\";\n\nimport InstructionList from \"../components/Controller/InstructionList\";\nimport SensorData from \"../components/Controller/SensorData\";\nimport CommandBank from \"../components/Controller/CommandBank\";\nimport StatusData from \"../components/Controller/StatusData\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectActiveAgentAndUnreadyData } from \"../store/store\";\n\nimport DB from \"../apis/database\";\n\nconst activeAgentSelector = (state) => state.controller.activeAgent\n\nexport default function BasicCardExample() {\n  const dispatch = useDispatch();\n  let activeAgent = useSelector(activeAgentSelector);\n\n  const handleChangeOption = (e) => {\n    dispatch(selectActiveAgentAndUnreadyData(e.target.value));\n  };\n\n  const handleRefreshListOfAgents = () => {\n    setDataReady(false);\n    DB.get().then((data) => {\n      let all_agents = [];\n      data.docs.forEach((doc) => {\n        all_agents.push(doc.id);\n      });\n      setData(all_agents);\n      setDataReady(true);\n    });\n  }\n\n  let [dataReady, setDataReady] = useState(false);\n  let [data, setData] = useState([]);\n\n  if (!dataReady) {\n    DB.get().then((data) => {\n      let all_agents = [];\n      data.docs.forEach((doc) => {\n        all_agents.push(doc.id);\n      });\n      setData(all_agents);\n      setDataReady(true);\n    });\n    return (\n      <Container>\n        <Row>Loading...</Row>\n      </Container>\n    );\n  }\n\n  let options = [<option value={\"select\"}>Please Select</option>];\n  data.forEach((agent_id) => {\n    options.push(<option value={agent_id} selected={activeAgent===agent_id}>{agent_id}</option>);\n  });\n\n  return (\n    <Container>\n      <Row>\n        <Col xs=\"12\" md=\"6\">\n          <h3 className=\"white\">Command Center</h3>\n          <Row>\n            <Col xs=\"8\" lg=\"9\">\n              <FormSelect onChange={handleChangeOption}>{options}</FormSelect>\n            </Col>\n            <Col xs='4' lg='3'>\n              <Button theme='info' style={{width: '100%'}} onClick={handleRefreshListOfAgents}>Refresh</Button>\n            </Col>\n          </Row>\n          <Row>\n            <CommandBank />\n          </Row>\n          <Row>\n            <StatusData />\n          </Row>\n        </Col>\n        <Col xs=\"12\" md=\"6\">\n          <h3 className=\"white\">Sensor Data</h3>\n          <SensorData />\n          <hr />\n          <h3 className=\"white\">Instruction Queue</h3>\n          <InstructionList></InstructionList>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport {\n  Card,\n  Col,\n  Container,\n  Row,\n  CardHeader,\n  CardBody,\n  CardTitle,\n} from \"shards-react\";\n\nconst cardStyle = {\n  margin: \"10px\",\n};\n\nexport default function BasicCardExample() {\n  return (\n    <Container>\n      <Row>\n        <Col sm=\"12\" md=\"4\">\n          <Card className=\"black\" style={cardStyle}>\n            <CardHeader>Faculty Advisor</CardHeader>\n            <CardBody>\n              <CardTitle>Dr. Magnus Egerstedt</CardTitle>\n            </CardBody>\n          </Card>\n        </Col>{\" \"}\n        <Col sm=\"12\" md=\"4\">\n          <Card className=\"black\" style={cardStyle}>\n            <CardHeader>Project Lead</CardHeader>\n            <CardBody>\n              <CardTitle>Allen Chen</CardTitle>\n            </CardBody>\n          </Card>\n        </Col>{\" \"}\n        <Col sm=\"12\" md=\"4\">\n          <Card className=\"black\" style={cardStyle}>\n            <CardHeader>Team Member</CardHeader>\n            <CardBody>\n              <CardTitle>Yousef Emam</CardTitle>\n            </CardBody>\n          </Card>\n        </Col>{\" \"}\n        <Col sm=\"12\" md=\"4\">\n          <Card className=\"black\" style={cardStyle}>\n            <CardHeader>Team Member</CardHeader>\n            <CardBody>\n              <CardTitle>Carmen Jimenez</CardTitle>\n            </CardBody>\n          </Card>\n        </Col>\n        <Col sm=\"12\" md=\"4\">\n          <Card className=\"black\" style={cardStyle}>\n            <CardHeader>Team Member</CardHeader>\n            <CardBody>\n              <CardTitle>Hannah Phillips</CardTitle>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport {\n  Col,\n  Container,\n  Row,\n  Button,\n  ListGroup,\n  ListGroupItem,\n  Badge,\n} from \"shards-react\";\n\nimport DB from \"../apis/database\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { toPage, selectActiveAgentAndUnreadyData } from \"../store/store\";\n\nexport default function BasicCardExample() {\n  const dispatch = useDispatch();\n\n  let [dataReady, setDataReady] = useState(false);\n  let [data, setData] = useState([]);\n\n  function handleConnect(agent_id) {\n    dispatch(selectActiveAgentAndUnreadyData(agent_id));\n    dispatch(toPage(\"controller\"));\n  }\n\n  const handleRefreshListOfAgents = () => {\n    setDataReady(false);\n    DB.get().then((data) => {\n      let all_agents = [];\n      data.docs.forEach((doc) => {\n        all_agents.push(doc.data());\n      });\n      setData(all_agents);\n      setDataReady(true);\n    });\n  };\n\n\n  // autorefresh\n  // useEffect(()=>{\n  //   const intervalHook = setInterval(handleRefreshListOfAgents, 3000);\n  //   return function cleanup(){\n  //     clearInterval(intervalHook);\n  //   }\n  // })\n\n\n\n\n  if (!dataReady) {\n    DB.get().then((data) => {\n      let all_agents = [];\n      data.docs.forEach((doc) => {\n        all_agents.push(doc.data());\n      });\n      setData(all_agents);\n      setDataReady(true);\n    });\n    return (\n      <Container>\n        <Row>Loading...</Row>\n      </Container>\n    );\n  }\n\n  let all_cards = [];\n  for (let agent of data) {\n    let online;\n    let button;\n    if (agent.state.heartbeat > Date.now() - 300 * 1000) {\n      online = (\n        <Badge outline theme=\"success\">\n          ONLINE\n        </Badge>\n      );\n      button = <Button onClick={() => handleConnect(agent.id)}>Control</Button>;\n    } else {\n      online = (\n        <Badge outline theme=\"light\">\n          OFFLINE\n        </Badge>\n      );\n      button = (\n        <Button\n          outline\n          theme=\"dark\"\n          onClick={() => handleConnect(agent.id)}\n          disabled\n        >\n          Control\n        </Button>\n      );\n    }\n\n    all_cards.push(\n      <ListGroupItem>\n        <Row className=\"black\">\n          <Col xs=\"12\" md=\"6\" lg=\"9\">\n            {agent.id}\n          </Col>\n          <Col xs=\"6\" md=\"3\" lg=\"1\">\n            <Row style={{ top: \"25%\", position: \"absolute\" }}>\n              <Col>{online}</Col>\n            </Row>\n          </Col>\n          <Col xs=\"6\" md=\"3\" lg=\"2\">\n            {button}\n          </Col>\n        </Row>\n        {/* <ListGroupItemHeading>{agent.id}</ListGroupItemHeading> */}\n        {/* <ListGroupItemText>{online}</ListGroupItemText> */}\n      </ListGroupItem>\n      // <Col sm=\"12\" md=\"4\">\n      //   <Card className=\"black\" style={cardStyle}>\n      //     <CardHeader>{agent.id}</CardHeader>\n      //     <CardBody>\n      //       <CardTitle>{online}</CardTitle>\n      //       <Button onClick={()=>handleConnect(agent.id)}>Connect</Button>\n      //     </CardBody>\n      //   </Card>\n      // </Col>\n    );\n  }\n\n  return (\n    <Container>\n      <hr />\n      <Row>\n        <Col xs=\"12\" md=\"10\">\n          <h1 className=\"white\">The SlothBot Network</h1>\n        </Col>\n        <Col xs='12' md='2'>\n                    <Button\n            theme=\"info\"\n            // style={{ width: \"100%\" }}\n            onClick={handleRefreshListOfAgents}\n          >\n            Refresh\n          </Button>\n        </Col>\n      </Row>\n      <hr />\n      <Row>\n      </Row>\n      <Row>\n        <ListGroup style={{ width: \"100%\" }}>{all_cards}</ListGroup>\n        {/* {all_cards} */}\n      </Row>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport NavBar from \"./components/universal/NavBar\";\nimport \"./MainLayout.css\"\nimport { connect } from \"react-redux\"\n\n\nimport Home from \"./pages/Home\";\nimport Controller from \"./pages/Controller\";\nimport Team from \"./pages/Team\"\nimport Dash from \"./pages/Dashboard\"\n\nclass App extends React.Component {\n\n\n  render() {\n    let main;\n    switch (this.props.view) {\n      case \"home\":\n        main = <Home />;\n        break;\n      case \"controller\":\n        main = <Controller />\n        break;\n      case \"team\":\n        main = <Team />\n        break;\n      case \"dashboard\":\n        main = <Dash />\n        break;\n      default:\n        main = <div>default</div>\n        break;\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"topbar\">\n          <NavBar />\n        </div>\n        <div className=\"mainContent\">{main}</div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  view: state.view\n});\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"shards-ui/dist/css/shards.min.css\"\n\nimport App from './App';\n\nimport { store } from \"./store/store\"\nimport { Provider } from 'react-redux';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}